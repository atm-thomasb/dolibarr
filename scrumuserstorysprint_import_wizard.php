<?php
/* Copyright (C) 2007-2017 Laurent Destailleur  <eldy@users.sourceforge.net>
 * Copyright (C) 2020	Maxime Kohlhaas		<maxime@atm-consulting.fr>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

/**
 *   	\file       scrumsprint_list.php
 *		\ingroup    scrumproject
 *		\brief      List page for scrumsprint
 */


// Load Dolibarr environment
$res = 0;
// Try main.inc.php into web root known defined into CONTEXT_DOCUMENT_ROOT (not always defined)
if (!$res && !empty($_SERVER["CONTEXT_DOCUMENT_ROOT"])) $res = @include $_SERVER["CONTEXT_DOCUMENT_ROOT"]."/main.inc.php";
// Try main.inc.php into web root detected using web root calculated from SCRIPT_FILENAME
$tmp = empty($_SERVER['SCRIPT_FILENAME']) ? '' : $_SERVER['SCRIPT_FILENAME']; $tmp2 = realpath(__FILE__); $i = strlen($tmp) - 1; $j = strlen($tmp2) - 1;
while ($i > 0 && $j > 0 && isset($tmp[$i]) && isset($tmp2[$j]) && $tmp[$i] == $tmp2[$j]) { $i--; $j--; }
if (!$res && $i > 0 && file_exists(substr($tmp, 0, ($i + 1))."/main.inc.php")) $res = @include substr($tmp, 0, ($i + 1))."/main.inc.php";
if (!$res && $i > 0 && file_exists(dirname(substr($tmp, 0, ($i + 1)))."/main.inc.php")) $res = @include dirname(substr($tmp, 0, ($i + 1)))."/main.inc.php";
// Try main.inc.php using relative path
if (!$res && file_exists("../main.inc.php")) $res = @include "../main.inc.php";
if (!$res && file_exists("../../main.inc.php")) $res = @include "../../main.inc.php";
if (!$res && file_exists("../../../main.inc.php")) $res = @include "../../../main.inc.php";
if (!$res) die("Include of main fails");

require_once DOL_DOCUMENT_ROOT.'/core/class/html.formcompany.class.php';
require_once DOL_DOCUMENT_ROOT.'/core/lib/date.lib.php';
require_once DOL_DOCUMENT_ROOT.'/core/lib/company.lib.php';
require_once DOL_DOCUMENT_ROOT.'/projet/class/project.class.php';
require_once DOL_DOCUMENT_ROOT.'/projet/class/task.class.php';
require_once DOL_DOCUMENT_ROOT.'/core/lib/project.lib.php';

// load scrumproject libraries
require_once __DIR__ . '/class/scrumuserstory.class.php';
require_once __DIR__ . '/class/scrumsprint.class.php';
require_once __DIR__ . '/class/scrumuserstorysprint.class.php';
require_once __DIR__ . '/lib/scrumproject.lib.php';

// for other modules
//dol_include_once('/othermodule/class/otherobject.class.php');

// Load translation files required by the page
$langs->loadLangs(array("scrumproject@scrumproject", "other"));

$action     = GETPOST('action', 'aZ09') ?GETPOST('action', 'aZ09') : 'view'; // The action 'add', 'create', 'edit', 'update', 'view', ...
$massaction = GETPOST('massaction', 'alpha'); // The bulk action (combo box choice into lists)
$confirmmassaction = GETPOST('confirmmassaction', 'alpha'); // The bulk action (combo box choice into lists)
$show_files = GETPOST('show_files', 'int'); // Show files area generated by bulk actions ?
$confirm    = GETPOST('confirm', 'alpha'); // Result of a confirmation
$cancel     = GETPOST('cancel', 'alpha'); // We click on a Cancel button
$toselect   = GETPOST('toselect', 'array'); // Array of ids of elements selected into a list
$contextpage = GETPOST('contextpage', 'aZ') ? GETPOST('contextpage', 'aZ') : 'scrumsprintlist'; // To manage different context of search
$backtopage = GETPOST('backtopage', 'alpha'); // Go back to a dedicated page
$optioncss  = GETPOST('optioncss', 'aZ'); // Option for the css output (always '' except when 'print')
$fk_user_story_sprint  = GETPOST('fk_user_story_sprint', 'int');
$id = GETPOST('id', 'int');
$fk_project = GETPOST('fk_project', 'int');

// Load variable for pagination
$limit = GETPOST('limit', 'int') ? GETPOST('limit', 'int') : $conf->liste_limit;
$sortfield = GETPOST('sortfield', 'aZ09comma');
$sortorder = GETPOST('sortorder', 'aZ09comma');
$page = GETPOSTISSET('pageplusone') ? (GETPOST('pageplusone') - 1) : GETPOST("page", 'int');
if (empty($page) || $page < 0 || GETPOST('button_search', 'alpha') || GETPOST('button_removefilter', 'alpha')) { $page = 0; }     // If $page is not defined, or '' or -1 or if we click on clear filters
$offset = $limit * $page;
$pageprev = $page - 1;
$pagenext = $page + 1;

// Initialize technical objects
$object = new Task($db);
$extrafields = new ExtraFields($db);


$diroutputmassaction = $conf->scrumproject->dir_output.'/temp/massgeneration/'.$user->id;
$hookmanager->initHooks(array('scrumsprintlist')); // Note that conf->hooks_modules contains array



$permissiontoadd = $user->rights->scrumproject->scrumuserstorysprint->write; // Used by the include of actions_addupdatedelete.inc.php and actions_lineupdown.inc.php
$permissiontodelete = $user->rights->scrumproject->scrumuserstorysprint->delete || ($permissiontoadd && isset($object->status) && $object->status == $object::STATUS_DRAFT);


$scrumFieldsToKeep = array(
	'rowid'			=> array(),
	'ref'			=> array('position'=>10, 'label' => 'Task' ),
);


if ($fk_project == '') {
	accessforbidden();
}

$project = new Project($db);
if ($fk_project > 0) {
	$ret = $project->fetch($fk_project); // If we create project, ref may be defined into POST but record does not yet exists into database
	if ($ret > 0) {
		$project->fetch_thirdparty();
	}
	else{
		accessforbidden();
	}
}



$listFields = array(
	'rowid' => array('type'=>'integer', 'label'=>'TechnicalID', 'enabled'=>'1', 'position'=>1, 'notnull'=>1, 'visible'=>0, 'noteditable'=>'1', 'index'=>1, 'css'=>'left', 'comment'=>"Id"),
	'ref' => array('type'=>'varchar(128)', 'label'=>'Ref', 'enabled'=>'1', 'position'=>20, 'notnull'=>1, 'visible'=>4, 'noteditable'=>'1', 'default'=>'(PROV)', 'index'=>1, 'searchall'=>1, 'showoncombobox'=>'1', 'validate'=>'1', 'comment'=>"Reference of object"),
	'label' => array('type'=>'varchar(255)', 'label'=>'Label', 'enabled'=>'1', 'position'=>30, 'notnull'=>0, 'visible'=>1, 'searchall'=>1, 'css'=>'minwidth300', 'cssview'=>'wordbreak', 'help'=>"Help text", 'showoncombobox'=>'2', 'validate'=>'1',),
//	'fk_task_parent' => array('type'=>'integer:Task:projet/class/task.class.php', 'label'=>'Task', 'enabled'=>'1', 'position'=>55, 'notnull'=>1, 'visible'=>1, 'index'=>1),
	'dateo' => array('type'=>'datetime', 'label'=>'DateStart', 'enabled'=>'1', 'position'=>500, 'notnull'=>1, 'visible'=>-2),
	'datee' => array('type'=>'datetime', 'label'=>'DateEnd', 'enabled'=>'1', 'position'=>500, 'notnull'=>1, 'visible'=>-2,),
	'datec' => array('type'=>'datetime', 'label'=>'DateCreation', 'enabled'=>'1', 'position'=>500, 'notnull'=>1, 'visible'=>-2,),
	'planned_workload' => array('type'=>'real', 'label'=>'PlannedWorkload', 'enabled'=>'1', 'position'=>40, 'notnull'=>1, 'visible'=>1, 'default'=>'0', 'isameasure'=>'1', 'css'=>'maxwidth75imp',),
	'budget_amount' => array('type'=>'real', 'label'=>'Budget', 'enabled'=>'1', 'position'=>50, 'notnull'=>0, 'visible'=>1, 'noteditable'=>'1', 'default'=>'0', 'isameasure'=>'1', 'css'=>'maxwidth75imp',),
	'description' => array('type'=>'html', 'label'=>'Description', 'enabled'=>'1', 'position'=>60, 'notnull'=>0, 'visible'=>3, 'validate'=>'1',)
);


// Definition of array of fields for columns
$arrayfields = array();
foreach ($listFields as $key => $val) {
	// If $val['visible']==0, then we never show the field
	if (!empty($val['visible'])) {
		$visible = (int) dol_eval($val['visible'], 1);
		$arrayfields['t.'.$key] = array(
			'label'=>$val['label'],
			'checked'=>(($visible < 0) ? 0 : 1),
			'enabled'=>($visible != 3 && dol_eval($val['enabled'], 1)),
			'position'=>$val['position'],
			'help'=> isset($val['help']) ? $val['help'] : ''
		);
	}
}


//
//// Fetch optionals attributes and labels
//$extrafields->fetch_name_optionals_label($object->table_element);
////$extrafields->fetch_name_optionals_label($object->table_element_line);

//$search_array_options = $extrafields->getOptionalsFromPost($object->table_element, '', 'search_');

// Default sort order (if not yet defined by previous GETPOST)
if (!$sortfield) $sortfield = "t.ref";
if (!$sortorder) $sortorder = "ASC";


// Initialize array of search criterias
$search_all = GETPOST('search_all', 'alphanohtml') ? GETPOST('search_all', 'alphanohtml') : GETPOST('sall', 'alphanohtml');
$search = array();


foreach ($listFields as $key => $val){
	if (GETPOST('search_'.$key, 'alpha') !== '') $search[$key] = GETPOST('search_'.$key, 'alpha');
}

//if (GETPOST('search_task_label', 'alpha') !== '') $search['task_label'] = GETPOST('search_task_label', 'alpha');



if(empty($search['status'])){
	$search['status'] = ['openall'];
}

// List of fields to search into when doing a "search in all"
$fieldstosearchall = array();
foreach ($listFields as $key => $val) {
	if ($val['searchall']) $fieldstosearchall['t.'.$key] = $val['label'];
}

// Definition of array of fields for columns
$arrayfields = array();
foreach ($listFields as $key => $val) {
	// If $val['visible']==0, then we never show the field
	if (!empty($val['visible'])) {
		$visible = (int) dol_eval($val['visible'], 1);
		$arrayfields['t.'.$key] = array(
			'label'=>$val['label'],
			'checked'=>(($visible < 0) ? 0 : 1),
			'enabled'=>($visible != 3 && dol_eval($val['enabled'], 1)),
			'position'=>$val['position'],
			'help'=>$val['help']
		);
	}
}

// Extra fields
//include DOL_DOCUMENT_ROOT.'/core/tpl/extrafields_list_array_fields.tpl.php'; // pour l'instant j'affiche pas les extrafields

$listFields = dol_sort_array($listFields, 'position');
$arrayfields = dol_sort_array($arrayfields, 'position');

$permissiontoread = $user->rights->scrumproject->scrumsprint->read;
$permissiontoadd = $user->rights->scrumproject->scrumsprint->write;
$permissiontodelete = $user->rights->scrumproject->scrumsprint->delete;

// Security check
if (empty($conf->scrumproject->enabled)) accessforbidden('Module not enabled');
$socid = 0;
if ($user->socid > 0)	// Protection if external user
{
	//$socid = $user->socid;
	accessforbidden();
}
//$result = restrictedArea($user, 'scrumproject', $id, '');
//if (!$permissiontoread) accessforbidden();



/*
 * Actions
 */

if (GETPOST('cancel', 'alpha')) { $action = 'list'; $massaction = ''; }
if (!GETPOST('confirmmassaction', 'alpha') && $massaction != 'presend' && $massaction != 'confirm_presend') { $massaction = ''; }

$parameters = array();
$reshook = $hookmanager->executeHooks('doActions', $parameters, $object, $action); // Note that $action and $object may have been modified by some hooks
if ($reshook < 0) setEventMessages($hookmanager->error, $hookmanager->errors, 'errors');

if (empty($reshook))
{

	// Purge search criteria
	if (GETPOST('button_removefilter_x', 'alpha') || GETPOST('button_removefilter.x', 'alpha') || GETPOST('button_removefilter', 'alpha')) // All tests are required to be compatible with all browsers
	{
		foreach ($search as $key => $val) {
			$search[$key] = '';
		}
		$toselect = '';
		$search_array_options = array();
	}
	if (GETPOST('button_removefilter_x', 'alpha') || GETPOST('button_removefilter.x', 'alpha') || GETPOST('button_removefilter', 'alpha')
		|| GETPOST('button_search_x', 'alpha') || GETPOST('button_search.x', 'alpha') || GETPOST('button_search', 'alpha'))
	{
		$massaction = ''; // Protection to avoid mass action if we force a new search during a mass action confirmation
	}


	if($confirm == 'yes' && $action == 'converttasktous') {
		if(!empty($toselect)){
			$successUs = 0;
			$successPlannedUs = 0;

			$userStoriesToPlan = array();

			foreach ($toselect as $taskId){
				$task = new Task($db);
				if($task->fetch($taskId) > 0){
					$error = 0;
					$fk_user_po = GETPOSTINT('fk_user_po');
					$fk_scrum_sprint = GETPOSTINT('fk_scrum_sprint');

					$scrumUserStory = new ScrumUserStory($db);
					$scrumUserStory->business_value = $scrumUserStory->fields['business_value']['default'];
					$scrumUserStory->ref = $scrumUserStory->fields['ref']['default'];
					$scrumUserStory->status = $scrumUserStory->fields['status']['default'];
					$scrumUserStory->label = $task->label;
					$scrumUserStory->description = $task->description;
					$scrumUserStory->fk_task = $taskId;
					$scrumUserStory->fk_user_creat = $user->id;
					$scrumUserStory->fk_user_po = GETPOSTINT('fk_user_po');

					// check errors
					foreach ($scrumUserStory->fields as $key => $val){
						if (!$error && !empty($val['validate']) && is_callable(array($scrumUserStory, 'validateField'))) {
							if (!$scrumUserStory->validateField($scrumUserStory->fields, $key, $scrumUserStory->{$key})) {
								$error++;
							}
						}
					}

					if(empty($error)){
						$res = $scrumUserStory->create($user);

						if($res > 0){
							$userStoriesToPlan[] = $res;
							$successUs++;
							$scrumUserStory->validate($user);

							if($fk_scrum_sprint>0){
								$error = 0;

								$scrumUserStorySprint = new ScrumUserStorySprint($db);
								$scrumUserStorySprint->ref = $scrumUserStorySprint->fields['ref']['default'];
								$scrumUserStorySprint->status = $scrumUserStorySprint->fields['status']['default'];
								$scrumUserStorySprint->fk_user_creat = $user->id;
								$scrumUserStorySprint->fk_scrum_user_story = $res;
								$scrumUserStorySprint->fk_scrum_sprint = $fk_scrum_sprint;
								$scrumUserStorySprint->business_value = $scrumUserStory->business_value;
								$scrumUserStorySprint->qty_planned = ceil( ($task->planned_workload / 60 / 60) / 0.25 ) * 0.25;
//								$scrumUserStorySprint->description = $task->description; // ne pas copier sinon ça fait doublon

								// check errors
								foreach ($scrumUserStorySprint->fields as $key => $val){
									if (!$error && !empty($val['validate']) && is_callable(array($scrumUserStorySprint, 'validateField'))) {
										if (!$scrumUserStorySprint->validateField($scrumUserStorySprint->fields, $key, $scrumUserStorySprint->{$key})) {
											$error++;
										}
									}
								}
								if(empty($error)){
									$res = $scrumUserStorySprint->create($user);
									if($res < 0){
										setEventMessage($langs->trans('ErrorCreateScrumUserStorySprint'). ' : '.$res.' '.$scrumUserStorySprint->errorsToString(), 'errors');
									}else{
										$successPlannedUs++;
									}
								}
								else{
									if(!empty($scrumUserStorySprint->validateFieldsErrors)){
										foreach ($scrumUserStorySprint->validateFieldsErrors as $field => $errorMsg){
											setEventMessage($langs->trans($scrumUserStorySprint->fields[$field]['label']) . ' : ' .$errorMsg, 'errors');
										}
									}else{
										setEventMessage($langs->trans('ErrorValidateScrumUserStoryValues'), 'errors');
									}
								}
							}
						}else{
							setEventMessage($langs->trans('ErrorCreateScrumUserStory'). ' : '.$scrumUserStory->errorsToString(), 'errors');
						}
					}
					else{
						if(!empty($scrumUserStory->validateFieldsErrors)){
							foreach ($scrumUserStory->validateFieldsErrors as $field => $errorMsg){
								setEventMessage($langs->trans($scrumUserStory->fields[$field]['label']) . ' : ' .$errorMsg, 'errors');
							}
						}else{
							setEventMessage($langs->trans('ErrorValidateScrumUserStoryValues'), 'errors');
						}
					}
				}
			}

			if($successUs){
				setEventMessage($langs->trans('XUserStoryCreated', $successUs));
				setEventMessage($langs->trans('XUserStorySprintCreated', $successPlannedUs));
			}

			if($fk_scrum_sprint>0) {
				header("Location: " . $_SERVER['PHP_SELF'] . "?fk_project=" . $fk_project);
				exit;
			}
			else{
				$action='plan-user-stories';
			}
		}
	}

//	if($action == 'deletePlanning' && $confirm == 'yes'){
//		$errors = 0;
//		$currentDefaultPageUrl = $_SERVER['PHP_SELF'].'?fk_project='.$project->id;
//		$scrumUserStorySprint = new ScrumUserStorySprint($db);
//		$res = $scrumUserStorySprint->fetch($fk_user_story_sprint);
//		if($res <= 0){
//			$errors++;
//			setEventMessage($langs->trans('NotFound'), 'errors');
//		}
//
//		if(!$errors && !$scrumUserStorySprint->canBeDeleted()){
//			$errors++;
//			setEventMessage($langs->trans('CantBeDeletedAlreadyInUse'), 'errors');
//		}
//
//		if(!$errors) {
//			$res = $scrumUserStorySprint->delete($user);
//			if($res > 0){
//				setEventMessage($langs->trans('Deleted'));
//			}else{
//				setEventMessage($langs->trans('DeleteError').' '.$scrumUserStorySprint->errorsToString(), 'errors');
//			}
//		}
//
//		header('Location:'.$currentDefaultPageUrl);
//		exit;
//	}


}



/*
 * View
 */

$form = new Form($db);

$now = dol_now();

//$help_url="EN:Module_ScrumSprint|FR:Module_ScrumSprint_FR|ES:Módulo_ScrumSprint";
$help_url = '';
$title = $langs->trans('TaskConvertionToUserStoryWizard');



// Build and execute select
// --------------------------------------------------------------------
$sql = 'SELECT ';

foreach ($listFields as $key => $val) {
	$sql .= 't.'.$key.', ';
}



//// Add fields from extrafields
//if (!empty($extrafields->attributes[$object->table_element]['label'])) {
//	foreach ($extrafields->attributes[$object->table_element]['label'] as $key => $val){
//		$sql .= ($extrafields->attributes[$object->table_element]['type'][$key] != 'separate' ? "ef.".$key.' as options_'.$key.', ' : '');
//	}
//}

// Add fields from hooks
$parameters = array();
$reshook = $hookmanager->executeHooks('printFieldListSelect', $parameters, $object); // Note that $action and $object may have been modified by hook
$sql .= preg_replace('/^,/', '', $hookmanager->resPrint);
$sql = preg_replace('/,\s*$/', '', $sql);

$sql .= " FROM ".MAIN_DB_PREFIX.$object->table_element." as t"; // llx_scrumproject_scrumuserstory
if (is_array($extrafields->attributes[$object->table_element]['label']) && count($extrafields->attributes[$object->table_element]['label'])) $sql .= " LEFT JOIN ".MAIN_DB_PREFIX.$object->table_element."_extrafields as ef on (t.rowid = ef.fk_object)";

$sql .= " LEFT JOIN ".MAIN_DB_PREFIX."scrumproject_scrumuserstory as us ON (us.fk_task = t.rowid ) ";


// Add table from hooks
$parameters = array();
$reshook = $hookmanager->executeHooks('printFieldListFrom', $parameters, $object); // Note that $action and $object may have been modified by hook
$sql .= $hookmanager->resPrint;
// Filter on project
$sql .= " WHERE t.fk_projet = " . $project->id;
$sql .= " AND us.fk_task IS NULL ";

if ($object->ismultientitymanaged == 1) $sql .= " AND t.entity IN (".getEntity($object->element).")";


foreach ($search as $key => $val)
{


	if($key == 'task_label' && $search[$key] !=''){
		$searchCol = ['pt.label'];
		$sql .= natural_search($searchCol, $search[$key]);
		continue;
	}

	if ($key == 'status' && $search[$key] == -1) continue;
	if ($key == 'status' && !empty($search['status'])) {
		$newarrayofstatus = array();
		if(is_array($search['status'])){
			foreach ($search['status'] as $key2 => $val2) {
				if (in_array($val2, array('openall', 'closeall'))) {
					continue;
				}
				$newarrayofstatus[] = $val2;
			}
		}
		else{
			if ($search['status'] == 'openall' || in_array('openall', $search['status'])) {
				$newarrayofstatus[] = ScrumSprint::STATUS_PENDING;
				$newarrayofstatus[] = ScrumSprint::STATUS_VALIDATED;
			}
			if ($search['status'] == 'closeall' || in_array('closeall', $search['status'])) {
				$newarrayofstatus[] = ScrumSprint::STATUS_DONE;
				$newarrayofstatus[] = ScrumSprint::STATUS_DRAFT;
			}
		}


		if (count($newarrayofstatus)) {
			$sql .= natural_search('t.'.$key, join(',', $newarrayofstatus), 2);
		}
		continue;
	}

	$mode_search = (($object->isInt($listFields[$key]) || $object->isFloat($listFields[$key])) ? 1 : 0);
	if (strpos($listFields[$key]['type'], 'integer:') === 0) {
		if ($search[$key] == '-1') $search[$key] = '';
		$mode_search = 2;
	}

	if ($search[$key] != ''){
		$searchCol = $key;
		if(isset($scrumFieldsToKeep[$key])){
			$searchCol = 't.'.$key;
		}

		$sql .= natural_search($searchCol, $search[$key], $mode_search);
	}
}
if ($search_all) $sql .= natural_search(array_keys($fieldstosearchall), $search_all);
//$sql.= dolSqlDateFilter("t.field", $search_xxxday, $search_xxxmonth, $search_xxxyear);
// Add where from extra fields
include DOL_DOCUMENT_ROOT.'/core/tpl/extrafields_list_search_sql.tpl.php';
// Add where from hooks
$parameters = array();
$reshook = $hookmanager->executeHooks('printFieldListWhere', $parameters, $object); // Note that $action and $object may have been modified by hook
$sql .= $hookmanager->resPrint;



// Add fields from extrafields
//if (! empty($extrafields->attributes[$object->table_element]['label'])) {
//	foreach ($extrafields->attributes[$object->table_element]['label'] as $key => $val) $sql.=($extrafields->attributes[$object->table_element]['type'][$key] != 'separate' ? "ef.".$key.', ' : '');
//}


// Add where from hooks
$parameters=array();
$reshook=$hookmanager->executeHooks('printFieldListGroupBy',$parameters, $object);    // Note that $action and $object may have been modified by hook
$sql.=$hookmanager->resPrint;
$sql=preg_replace('/,\s*$/','', $sql);


$sql .= $db->order($sortfield, $sortorder);

// Count total nb of records
$nbtotalofrecords = '';
if (empty($conf->global->MAIN_DISABLE_FULL_SCANLIST)) {
	$resql = $db->query($sql);
	$nbtotalofrecords = $db->num_rows($resql);
	if (($page * $limit) > $nbtotalofrecords) {	// if total of record found is smaller than page * limit, goto and load page 0
		$page = 0;
		$offset = 0;
	}
}
// if total of record found is smaller than limit, no need to do paging and to restart another select with limits set.
if (is_numeric($nbtotalofrecords) && ($limit > $nbtotalofrecords || empty($limit))) {
	$num = $nbtotalofrecords;
} else {
	if ($limit) $sql .= $db->plimit($limit + 1, $offset);

	$resql = $db->query($sql);
	if (!$resql) {
		dol_print_error($db);
		exit;
	}

	$num = $db->num_rows($resql);
}

// Direct jump if only one record found
if ($num == 1 && !empty($conf->global->MAIN_SEARCH_DIRECT_OPEN_IF_ONLY_ONE) && $search_all && !$page)
{
	$obj = $db->fetch_object($resql);
	$id = $obj->rowid;
	header("Location: ".dol_buildpath('/scrumproject/scrumsprint_card.php', 1).'?id='.$id);
	exit;
}


// Output page
// --------------------------------------------------------------------
llxHeader('', $title, $help_url, '', 0, 0);


$head = project_prepare_head($project);
print dol_get_fiche_head($head, 'projectTasksPlanning', $langs->trans("Project"), -1, ($project->public ? 'projectpub' : 'project'));


// Project card

$linkback = '<a href="'.DOL_URL_ROOT.'/projet/list.php?restore_lastsearch_values=1">'.$langs->trans("BackToList").'</a>';

$morehtmlref = '<div class="refidno">';
// Title
$morehtmlref .= dol_escape_htmltag($project->title);
// Thirdparty
$morehtmlref .= '<br>'.$langs->trans('ThirdParty').' : ';
if (!empty($project->thirdparty->id) && $object->thirdparty->id > 0) {
	$morehtmlref .= $project->thirdparty->getNomUrl(1, 'project');
}
$morehtmlref .= '</div>';

// Define a complementary filter for search of next/prev ref.
if (empty($user->rights->projet->all->lire)) {
	$objectsListId = $project->getProjectsAuthorizedForUser($user, 0, 0);
	$project->next_prev_filter = " rowid IN (".$db->sanitize(count($objectsListId) ? join(',', array_keys($objectsListId)) : '0').")";
}

dol_banner_tab($project, 'ref', $linkback, 0, 'ref', 'ref', $morehtmlref);

print dol_get_fiche_end(-1);


$arrayofselected = is_array($toselect) ? $toselect : array();

$param = '&fk_project='.$project->id;
if (!empty($contextpage) && $contextpage != $_SERVER["PHP_SELF"]) $param .= '&contextpage='.urlencode($contextpage);
if ($limit > 0 && $limit != $conf->liste_limit) $param .= '&limit='.urlencode($limit);
foreach ($search as $key => $val)
{
	if (is_array($search[$key]) && count($search[$key])) foreach ($search[$key] as $skey) $param .= '&search_'.$key.'[]='.urlencode($skey);
	else $param .= '&search_'.$key.'='.urlencode($search[$key]);
}
if ($optioncss != '')     $param .= '&optioncss='.urlencode($optioncss);
// Add $param from extra fields
include DOL_DOCUMENT_ROOT.'/core/tpl/extrafields_list_search_param.tpl.php';
// Add $param from hooks
$parameters = array();
$reshook = $hookmanager->executeHooks('printFieldListSearchParam', $parameters, $object); // Note that $action and $object may have been modified by hook
$param .= $hookmanager->resPrint;

// List of mass actions available
$arrayofmassactions = array();

if ($permissiontoadd) {
	$arrayofmassactions['converttasktous_confirm'] = $langs->trans('TaskConvertionToUserStoryWizard');
};

//if ($permissiontodelete) $arrayofmassactions['predelete'] = '<span class="fa fa-trash paddingrightonly"></span>'.$langs->trans("Delete");
if (GETPOST('nomassaction', 'int') || in_array($massaction, array('presend', 'predelete'))) $arrayofmassactions = array();
$massactionbutton = $form->selectMassAction('', $arrayofmassactions);



if($action == 'plan-user-stories' && !empty($userStoriesToPlan)){
	print '<form method="POST" id="goto-plan-wizard" action="'.dol_buildpath('scrumproject/scrumuserstorysprint_plan_wizard.php', 1).'">'."\n";
	print '<input type="hidden" name="token" value="'.newToken().'">';
	foreach ($userStoriesToPlan as $userStoryId) {
		print '<input type="hidden" name="toselect['.$userStoryId.']" value="'.$userStoryId.'">';
	}
	print '</form>'."\n";
	print '<script>document.forms["goto-plan-wizard"].submit();</script>';
}




print '<form method="POST" id="searchFormList" action="'.$_SERVER["PHP_SELF"].'">'."\n";
if ($optioncss != '') print '<input type="hidden" name="optioncss" value="'.$optioncss.'">';
print '<input type="hidden" name="token" value="'.newToken().'">';
print '<input type="hidden" name="formfilteraction" id="formfilteraction" value="list">';
print '<input type="hidden" name="action" value="list">';
print '<input type="hidden" name="sortfield" value="'.$sortfield.'">';
print '<input type="hidden" name="sortorder" value="'.$sortorder.'">';
print '<input type="hidden" name="contextpage" value="'.$contextpage.'">';
print '<input type="hidden" name="fk_project" value="'.$project->id.'">';


$listBtn = '';

if($fk_project>0){
	$urlTaskPlanning = dol_buildpath('/scrumproject/scrumuserstorysprint_list.php', 1)
		.'?fk_project='.$fk_project
		.'&contextpage=scrumuserstorysprint_list_project_vue';
	$listBtn.= dolGetButtonTitle($langs->trans('ViewByUsPlanned'), '', 'fa fa-list', $urlTaskPlanning, '', $permissiontoadd);


	$urlTaskPlanning = dol_buildpath('/scrumproject/scrumsprint_project_tasks_planning.php', 1).'?fk_project='.$fk_project;
	$listBtn.= dolGetButtonTitle($langs->trans('ViewByTaskPlanned'), '', 'fa fa-tasks', $urlTaskPlanning, '', $permissiontoadd);
}


print_barre_liste($title, $page, $_SERVER["PHP_SELF"], $param, $sortfield, $sortorder, $massactionbutton, $num, $nbtotalofrecords, $object->picto, 0, $listBtn, '', $limit, 0, 0, 1);



// Add code for pre mass action (confirmation or email presend form)
$topicmail = "SendScrumSprintRef";
$modelmail = "scrumsprint";
$objecttmp = new ScrumSprint($db);
//$trackid = 'xxxx'.$object->id;
// Allow Pre-Mass-Action hook (eg for confirmation dialog)


$parameters = array(
	'toselect' => $toselect
);

$reshook = $hookmanager->executeHooks('doPreMassActions', $parameters, $object, $action);
if ($reshook < 0) {
	setEventMessages($hookmanager->error, $hookmanager->errors, 'errors');
} else if ($reshook > 0) {
	print $hookmanager->resPrint;
}
else{
	if ($massaction == 'converttasktous_confirm') {

		$scrumUserStoryStatic = new ScrumUserStory($db);
		$scrumUserStorySprintStatic = new ScrumUserStorySprint($db);

		$formquestion = array(
			'fk_user_po' => array(
				'label'=> $langs->trans($scrumUserStoryStatic->fields['fk_user_po']['label'])
				,'type'=> 'other'
				,'value'=> $scrumUserStoryStatic->showInputField(null, 'fk_user_po', $user->id, '', '', '', 0, 1)
				, 'size'=> ''
				, 'morecss'=> ''
				, 'moreattr'=> ''
			),
			'fk_scrum_sprint' => array(
				'label'=> $langs->trans($scrumUserStorySprintStatic->fields['fk_scrum_sprint']['label'])
				,'type'=> 'other'
				,'value'=> $scrumUserStorySprintStatic->showInputField(null, 'fk_scrum_sprint', $user->id, '', '', '', 0, 1)
				, 'size'=> ''
				, 'morecss'=> ''
				, 'moreattr'=> ''
			),
		);


		print $form->formconfirm($_SERVER["PHP_SELF"],
			$langs->trans("ConfirmMassTaskImportIntoScrumManagement"),
			$langs->trans("ConfirmMassTaskImportIntoScrumManagementQuestion",
			count($toselect)),
			"converttasktous",
			$formquestion,
			'yes',
			0,
			200,
			'500',
			1
		);
	}
}



if ($search_all)
{
	foreach ($fieldstosearchall as $key => $val) $fieldstosearchall[$key] = $langs->trans($val);
	print '<div class="divsearchfieldfilter">'.$langs->trans("FilterOnInto", $search_all).join(', ', $fieldstosearchall).'</div>';
}

$moreforfilter = '';
/*$moreforfilter.='<div class="divsearchfield">';
$moreforfilter.= $langs->trans('MyFilter') . ': <input type="text" name="search_myfield" value="'.dol_escape_htmltag($search_myfield).'">';
$moreforfilter.= '</div>';*/

$parameters = array();
$reshook = $hookmanager->executeHooks('printFieldPreListTitle', $parameters, $object); // Note that $action and $object may have been modified by hook
if (empty($reshook)) $moreforfilter .= $hookmanager->resPrint;
else $moreforfilter = $hookmanager->resPrint;

if (!empty($moreforfilter))
{
	print '<div class="liste_titre liste_titre_bydiv centpercent">';
	print $moreforfilter;
	print '</div>';
}

$varpage = empty($contextpage) ? $_SERVER["PHP_SELF"] : $contextpage;
$selectedfields = $form->multiSelectArrayWithCheckbox('selectedfields', $arrayfields, $varpage); // This also change content of $arrayfields
$selectedfields .= (count($arrayofmassactions) ? $form->showCheckAddButtons('checkforselect', 1) : '');

print '<div class="div-table-responsive">'; // You can use div-table-responsive-no-min if you dont need reserved height for your table
print '<table class="tagtable nobottomiftotal liste'.($moreforfilter ? " listwithfilterbefore" : "").'">'."\n";


// Fields title search
// --------------------------------------------------------------------
print '<tr class="liste_titre">';

//if (!empty($arrayfields['pt.label']['checked'])) {
//	print '<td class="liste_titre">';
//	print '<input name="search_task_label" value="' . dol_escape_htmltag($search['task_label']) . '" >';
//	print '</td>';
//}

foreach ($listFields as $key => $val)
{
	$cssforfield = (empty($val['css']) ? '' : $val['css']);
	if ($key == 'status') $cssforfield .= ($cssforfield ? ' ' : '').'center';
	elseif (in_array($val['type'], array('date', 'datetime', 'timestamp'))) $cssforfield .= ($cssforfield ? ' ' : '').'center';
	elseif (in_array($val['type'], array('timestamp'))) $cssforfield .= ($cssforfield ? ' ' : '').'nowrap';
	elseif (in_array($val['type'], array('double(24,8)', 'double(6,3)', 'integer', 'real', 'price')) && $val['label'] != 'TechnicalID') $cssforfield .= ($cssforfield ? ' ' : '').'right';
	if (!empty($arrayfields['t.'.$key]['checked']))
	{
		print '<td class="liste_titre'.($cssforfield ? ' '.$cssforfield : '').'">';

		if ($key == 'label' || $key == 'planned_workload' || $key == 'budget_amount' ) {

		}
		elseif ($key == 'status') {
			$arrayofstatus = array();
			$arrayofstatus['openall'] = '-- '.$langs->trans('OpenAll').' --';
			foreach ($listFields['status']['arrayofkeyval'] as $key2 => $val2) {
				$arrayofstatus[$key2] = $val2;
			}
			$selectedarray = null;
			if (!empty($search[$key])) {
				$selectedarray = array_values($search[$key]);
			}
			print Form::multiselectarray('search_status', $arrayofstatus, $selectedarray, 0, 0, 'minwidth100imp maxwidth150', 1, 0, '', '', '');
		}elseif (!empty($val['arrayofkeyval']) && is_array($val['arrayofkeyval'])){
			print $form->selectarray('search_'.$key, $val['arrayofkeyval'], $search[$key], $val['notnull'], 0, 0, '', 1, 0, 0, '', 'maxwidth100', 1);
		}
		elseif (strpos($val['type'], 'integer:') === 0) {
			print $object->showInputField($val, $key, $search[$key], '', '', 'search_', 'maxwidth125', 1);
		} elseif (!preg_match('/^(date|timestamp)/', $val['type'])){
			print '<input type="text" class="flat maxwidth75" name="search_'.$key.'" value="'.dol_escape_htmltag($search[$key]).'">';
		}


		print '</td>';
	}


}
// Extra fields
include DOL_DOCUMENT_ROOT.'/core/tpl/extrafields_list_search_input.tpl.php';

// Fields from hook
$parameters = array('arrayfields'=>$arrayfields);
$reshook = $hookmanager->executeHooks('printFieldListOption', $parameters, $object); // Note that $action and $object may have been modified by hook
print $hookmanager->resPrint;
// Action column
print '<td class="liste_titre maxwidthsearch">';
$searchpicto = $form->showFilterButtons();
print $searchpicto;
print '</td>';
print '</tr>'."\n";


// Fields title label
// --------------------------------------------------------------------
print '<tr class="liste_titre">';

//$colKey = 'pt.label';
//if (!empty($arrayfields[$colKey]['checked'])) {
//	print getTitleFieldOfList($arrayfields[$colKey]['label'], 0, $_SERVER['PHP_SELF'], $colKey, '', $param, '', $sortfield, $sortorder, '')."\n";
//}


foreach ($listFields as $key => $val)
{
	$cssforfield = (empty($val['csslist']) ? (empty($val['css']) ? '' : $val['css']) : $val['csslist']);
	if ($key == 'status') $cssforfield .= ($cssforfield ? ' ' : '').'center';
	elseif (in_array($val['type'], array('date', 'datetime', 'timestamp'))) $cssforfield .= ($cssforfield ? ' ' : '').'center';
	elseif (in_array($val['type'], array('timestamp'))) $cssforfield .= ($cssforfield ? ' ' : '').'nowrap';
	elseif (in_array($val['type'], array('double(24,8)', 'double(6,3)', 'integer', 'real', 'price')) && $val['label'] != 'TechnicalID') $cssforfield .= ($cssforfield ? ' ' : '').'right';
	if (!empty($arrayfields['t.'.$key]['checked']))
	{
		print getTitleFieldOfList($arrayfields['t.'.$key]['label'], 0, $_SERVER['PHP_SELF'], 't.'.$key, '', $param, ($cssforfield ? 'class="'.$cssforfield.'"' : ''), $sortfield, $sortorder, ($cssforfield ? $cssforfield.' ' : ''))."\n";
	}
}
// Extra fields
include DOL_DOCUMENT_ROOT.'/core/tpl/extrafields_list_search_title.tpl.php';
// Hook fields
$parameters = array('arrayfields'=>$arrayfields, 'param'=>$param, 'sortfield'=>$sortfield, 'sortorder'=>$sortorder);
$reshook = $hookmanager->executeHooks('printFieldListTitle', $parameters, $object); // Note that $action and $object may have been modified by hook
print $hookmanager->resPrint;
// Action column
print getTitleFieldOfList($selectedfields, 0, $_SERVER["PHP_SELF"], '', '', '', '', $sortfield, $sortorder, 'center maxwidthsearch ')."\n";
print '</tr>'."\n";


// Detect if we need a fetch on each output line
$needToFetchEachLine = 0;
if (is_array($extrafields->attributes[$object->table_element]['computed']) && count($extrafields->attributes[$object->table_element]['computed']) > 0)
{
	foreach ($extrafields->attributes[$object->table_element]['computed'] as $key => $val)
	{
		if (preg_match('/\$object/', $val)) $needToFetchEachLine++; // There is at least one compute field that use $object
	}
}


// Loop on record
// --------------------------------------------------------------------
$i = 0;
$totalarray = array();
while ($i < ($limit ? min($num, $limit) : $num))
{
	$obj = $db->fetch_object($resql);
	if (empty($obj)) break; // Should not happen

	// Store properties in $object
	$object = scrumProjectGetObjectByElement('projet_task', $obj->rowid);
	/**
	 * @var Task $task
	 */

	// Show here line of result
	print '<tr class="oddeven" id="user-story-'.$obj->rowid.'">';

//	if (!empty($arrayfields['pt.label']['checked'])) {
//		print '<td class="nowrap">';
//		print '<span class="toggle-more-btn" title="'.dol_escape_htmltag($langs->trans('ShowDetails')).'" data-target="'. $obj->rowid.'"><i class="fa fa-plus-square" ></i></span>';
//		if($task) {
//			print $task->getNomUrl(1, '', 'task', 1).' ';
//		}
//		print '</td>';
//	}



	foreach ($listFields as $key => $val)
	{
		$cssforfield = (empty($val['css']) ? '' : $val['css']);
		if (in_array($val['type'], array('date', 'datetime', 'timestamp'))) $cssforfield .= ($cssforfield ? ' ' : '').'center';
		elseif ($key == 'status') $cssforfield .= ($cssforfield ? ' ' : '').'center';

		if (in_array($val['type'], array('timestamp'))) $cssforfield .= ($cssforfield ? ' ' : '').'nowrap';
		elseif ($key == 'ref') $cssforfield .= ($cssforfield ? ' ' : '').'nowrap';

		if (in_array($val['type'], array('double(24,8)', 'double(6,3)', 'integer', 'real', 'price')) && !in_array($key, array('rowid', 'status'))) $cssforfield .= ($cssforfield ? ' ' : '').'right';
		//if (in_array($key, array('fk_soc', 'fk_user', 'fk_warehouse'))) $cssforfield = 'tdoverflowmax100';

		if (!empty($arrayfields['t.'.$key]['checked']))
		{
			print '<td'.($cssforfield ? ' class="'.$cssforfield.'"' : '').'>';

			if ($key == 'ref'){
				print $object->getNomUrl(5);
			}
			elseif ($key == 'status'){
				print $object->getLibStatut(5);
			}elseif ($key == 'planned_workload'){
				print price($object->planned_workload / 60 / 60);
			}elseif ($key == 'budget_amount'){
				print price($object->budget_amount);
			}else{
				print $object->$key;
			}

			print '</td>';
			if (!$i) $totalarray['nbfield']++;
			if (!empty($val['isameasure']))
			{
				if (!$i) $totalarray['pos'][$totalarray['nbfield']] = 't.'.$key;

				if($key == 'planned_workload'){
					$totalarray['val']['t.' . $key] += $object->$key / 60 / 60;
				}else {
					$totalarray['val']['t.' . $key] += $object->$key;
				}
			}
		}
	}
	// Extra fields
	include DOL_DOCUMENT_ROOT.'/core/tpl/extrafields_list_print_fields.tpl.php';
	// Fields from hook
	$parameters = array('arrayfields'=>$arrayfields, 'object'=>$object, 'obj'=>$obj, 'i'=>$i, 'totalarray'=>&$totalarray);
	$reshook = $hookmanager->executeHooks('printFieldListValue', $parameters, $object); // Note that $action and $object may have been modified by hook
	print $hookmanager->resPrint;
	// Action column
	print '<td class="nowrap center">';
	if ($massactionbutton || $massaction)   // If we are in select mode (massactionbutton defined) or if we have already selected and sent an action ($massaction) defined
	{
		$selected = 0;
		if (in_array($object->id, $arrayofselected)) $selected = 1;
		print '<input id="cb'.$object->id.'" class="flat checkforselect" type="checkbox" name="toselect[]" value="'.$object->id.'"'.($selected ? ' checked="checked"' : '').'>';
	}
	print '</td>';
	if (!$i) $totalarray['nbfield']++;

	print '</tr>'."\n";

	$i++;
}

// Show total line
include DOL_DOCUMENT_ROOT.'/core/tpl/list_print_total.tpl.php';

// If no record found
if ($num == 0)
{
	$colspan = 1;
	foreach ($arrayfields as $key => $val) { if (!empty($val['checked'])) $colspan++; }
	print '<tr><td colspan="'.$colspan.'" class="opacitymedium">'.$langs->trans("NoRecordFound").'</td></tr>';
}


$db->free($resql);

$parameters = array('arrayfields'=>$arrayfields, 'sql'=>$sql);
$reshook = $hookmanager->executeHooks('printFieldListFooter', $parameters, $object); // Note that $action and $object may have been modified by hook
print $hookmanager->resPrint;

print '</table>'."\n";
print '</div>'."\n";

print '</form>'."\n";

if (in_array('builddoc', $arrayofmassactions) && ($nbtotalofrecords === '' || $nbtotalofrecords))
{
	$hidegeneratedfilelistifempty = 1;
	if ($massaction == 'builddoc' || $action == 'remove_file' || $show_files) $hidegeneratedfilelistifempty = 0;

	require_once DOL_DOCUMENT_ROOT.'/core/class/html.formfile.class.php';
	$formfile = new FormFile($db);

	// Show list of available documents
	$urlsource = $_SERVER['PHP_SELF'].'?sortfield='.$sortfield.'&sortorder='.$sortorder;
	$urlsource .= str_replace('&amp;', '&', $param);

	$filedir = $diroutputmassaction;
	$genallowed = $permissiontoread;
	$delallowed = $permissiontoadd;

	print $formfile->showdocuments('massfilesarea_scrumproject', '', $filedir, $urlsource, 0, $delallowed, '', 1, 1, 0, 48, 1, $param, $title, '', '', '', null, $hidegeneratedfilelistifempty);
}

// End of page
llxFooter();
$db->close();


