<?php
/* Copyright (C) 2007-2017 Laurent Destailleur  <eldy@users.sourceforge.net>
 * Copyright (C) 2020	Maxime Kohlhaas		<maxime@atm-consulting.fr>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

/**
 *   	\file       scrumsprint_list.php
 *		\ingroup    scrumproject
 *		\brief      List page for scrumsprint
 */


// Load Dolibarr environment
$res = 0;
// Try main.inc.php into web root known defined into CONTEXT_DOCUMENT_ROOT (not always defined)
if (!$res && !empty($_SERVER["CONTEXT_DOCUMENT_ROOT"])) $res = @include $_SERVER["CONTEXT_DOCUMENT_ROOT"]."/main.inc.php";
// Try main.inc.php into web root detected using web root calculated from SCRIPT_FILENAME
$tmp = empty($_SERVER['SCRIPT_FILENAME']) ? '' : $_SERVER['SCRIPT_FILENAME']; $tmp2 = realpath(__FILE__); $i = strlen($tmp) - 1; $j = strlen($tmp2) - 1;
while ($i > 0 && $j > 0 && isset($tmp[$i]) && isset($tmp2[$j]) && $tmp[$i] == $tmp2[$j]) { $i--; $j--; }
if (!$res && $i > 0 && file_exists(substr($tmp, 0, ($i + 1))."/main.inc.php")) $res = @include substr($tmp, 0, ($i + 1))."/main.inc.php";
if (!$res && $i > 0 && file_exists(dirname(substr($tmp, 0, ($i + 1)))."/main.inc.php")) $res = @include dirname(substr($tmp, 0, ($i + 1)))."/main.inc.php";
// Try main.inc.php using relative path
if (!$res && file_exists("../main.inc.php")) $res = @include "../main.inc.php";
if (!$res && file_exists("../../main.inc.php")) $res = @include "../../main.inc.php";
if (!$res && file_exists("../../../main.inc.php")) $res = @include "../../../main.inc.php";
if (!$res) die("Include of main fails");

require_once DOL_DOCUMENT_ROOT.'/core/class/html.formcompany.class.php';
require_once DOL_DOCUMENT_ROOT.'/core/lib/date.lib.php';
require_once DOL_DOCUMENT_ROOT.'/core/lib/company.lib.php';
require_once DOL_DOCUMENT_ROOT.'/projet/class/project.class.php';
require_once DOL_DOCUMENT_ROOT.'/projet/class/task.class.php';
require_once DOL_DOCUMENT_ROOT.'/core/lib/project.lib.php';

// load scrumproject libraries
require_once __DIR__ . '/class/scrumuserstory.class.php';
require_once __DIR__ . '/class/scrumsprint.class.php';
require_once __DIR__ . '/class/scrumuserstorysprint.class.php';
require_once __DIR__ . '/lib/scrumproject.lib.php';


// for other modules
//dol_include_once('/othermodule/class/otherobject.class.php');

// Load translation files required by the page
$langs->loadLangs(array("scrumproject@scrumproject", "other"));

$action     = GETPOST('action', 'aZ09') ?GETPOST('action', 'aZ09') : 'view'; // The action 'add', 'create', 'edit', 'update', 'view', ...
$massaction = GETPOST('massaction', 'alpha'); // The bulk action (combo box choice into lists)
$show_files = GETPOST('show_files', 'int'); // Show files area generated by bulk actions ?
$confirm    = GETPOST('confirm', 'alpha'); // Result of a confirmation
$cancel     = GETPOST('cancel', 'alpha'); // We click on a Cancel button
$toselect   = GETPOST('toselect', 'array'); // Array of ids of elements selected into a list
$contextpage = GETPOST('contextpage', 'aZ') ? GETPOST('contextpage', 'aZ') : 'scrumsprintlistplanwizard'; // To manage different context of search
$backtopage = GETPOST('backtopage', 'alpha'); // Go back to a dedicated page
$optioncss  = GETPOST('optioncss', 'aZ'); // Option for the css output (always '' except when 'print')
$fk_user_story_sprint  = GETPOST('fk_user_story_sprint', 'int');

$id = GETPOST('id', 'int');
$fk_project = GETPOST('fk_project', 'int');

// Load variable for pagination
$limit = GETPOST('limit', 'int') ? GETPOST('limit', 'int') : $conf->liste_limit;
$sortfield = GETPOST('sortfield', 'aZ09comma');
$sortorder = GETPOST('sortorder', 'aZ09comma');
$page = GETPOSTISSET('pageplusone') ? (GETPOST('pageplusone') - 1) : GETPOST("page", 'int');
if (empty($page) || $page < 0 || GETPOST('button_search', 'alpha') || GETPOST('button_removefilter', 'alpha')) { $page = 0; }     // If $page is not defined, or '' or -1 or if we click on clear filters
$offset = $limit * $page;
$pageprev = $page - 1;
$pagenext = $page + 1;

// Initialize technical objects
$object = new ScrumUserStory($db);
$extrafields = new ExtraFields($db);


$diroutputmassaction = $conf->scrumproject->dir_output.'/temp/massgeneration/'.$user->id;
$hookmanager->initHooks(array('scrumsprintlistplanwizard')); // Note that conf->hooks_modules contains array



$permissiontoread = $user->hasRight('scrumproject','scrumuserstory','read');
$permissiontoadd = $user->hasRight('scrumproject','scrumuserstory','write');
$permissiontodelete = $user->hasRight('scrumproject','scrumuserstory','delete');

$scrumFieldsToKeep = array(
	'rowid'			=> array(),
//	'fk_task'		=> array('position'=>0 ), // les taches vont être géré a part
	'ref'			=> array('position'=>10, 'label' => 'ScrumUserStory' ),
	'qty_velocity'	=> array('position'=>35  ),
	'qty_planned'	=> array('position'=>40  ),
	'qty_done'		=> array('position'=>45  ),
	'status' 		=> array('position'=>1000),
);


if (empty($toselect)) {
	accessforbidden();
}


// Security check
if (! isModEnabled('scrumproject')) accessforbidden('Module not enabled');
$socid = 0;
if ($user->socid > 0)	// Protection if external user
{
	accessforbidden();
}


/*
 * Actions
 */

if (GETPOST('cancel', 'alpha')) { $action = 'list'; $massaction = ''; }
if (!GETPOST('confirmmassaction', 'alpha') && $massaction != 'presend' && $massaction != 'confirm_presend') { $massaction = ''; }

$parameters = array();
$reshook = $hookmanager->executeHooks('doActions', $parameters, $object, $action); // Note that $action and $object may have been modified by some hooks
if ($reshook < 0) setEventMessages($hookmanager->error, $hookmanager->errors, 'errors');

if (empty($reshook))
{


}



/*
 * View
 */

$form = new Form($db);

$now = dol_now();

//$help_url="EN:Module_ScrumSprint|FR:Module_ScrumSprint_FR|ES:Módulo_ScrumSprint";
$help_url = '';
$title = $langs->trans('ListOfSprintProjectPlanning');



// Build and execute select
// --------------------------------------------------------------------
$sql = 'SELECT ';
$sql.= 't.rowid id';

// Add fields from hooks
$parameters = array();
$reshook = $hookmanager->executeHooks('printFieldListSelect', $parameters, $object); // Note that $action and $object may have been modified by hook
$sql .= preg_replace('/^,/', '', $hookmanager->resPrint);
$sql = preg_replace('/,\s*$/', '', $sql);

$sql .= " FROM ".MAIN_DB_PREFIX.$object->table_element." as t";

// Add table from hooks
$parameters = array();
$reshook = $hookmanager->executeHooks('printFieldListFrom', $parameters, $object); // Note that $action and $object may have been modified by hook
$sql .= $hookmanager->resPrint;
// Filter on project

$toselect = array_map('intval', $toselect);

$sql .= " WHERE t.rowid IN( " . implode(',', $toselect). ') ';

if ($object->ismultientitymanaged == 1) $sql .= " AND t.entity IN (".getEntity($object->element).")";


// Add where from hooks
$parameters = array();
$reshook = $hookmanager->executeHooks('printFieldListWhere', $parameters, $object); // Note that $action and $object may have been modified by hook
$sql .= $hookmanager->resPrint;


// Add where from hooks
$parameters=array();
$reshook=$hookmanager->executeHooks('printFieldListGroupBy',$parameters, $object);    // Note that $action and $object may have been modified by hook
$sql.=$hookmanager->resPrint;
$sql=preg_replace('/,\s*$/','', $sql);


$sql .= $db->order($sortfield, $sortorder);

$TQueryResults = $db->getRows($sql);




// Output page
// --------------------------------------------------------------------
$arrayofjs = array(
	'scrumproject/js/scrumproject.js',
	'scrumproject/js/liveedit.js',
	'scrumproject/js/scrum_user_story_sprint_plan_wizard.js'
);
$arrayofcss = array(
	'scrumproject/css/liveedit.css'
);
llxHeader('', $title, $help_url, '', 0, 0, $arrayofjs, $arrayofcss);



print '<form method="POST" id="form-scrum-user-story-plan-wizard" >'."\n";
print '<input type="hidden" name="token" value="'.newToken().'">';
print '<input type="hidden" name="action" value="list">';
print '<input type="hidden" name="interface-url" value="'.dol_buildpath('scrumproject/interface.php',1).'">';

$listBtn = dolGetButtonTitle($langs->trans('toggleHideClosedSprint'), $langs->trans('toggleHideClosedSprintHelp'), 'fa fa-eye-slash', '', 'toggle-view-closed-sprint', 1, array('attr' => array('data-toggle' => 'show')));

print_barre_liste($title, -1, $_SERVER["PHP_SELF"], '', $sortfield, $sortorder, '', 0, '', $object->picto, 0, $listBtn);



// Add code for pre mass action (confirmation or email presend form)


// Allow Pre-Mass-Action hook (eg for confirmation dialog)
$parameters = array(
	'toselect' => $toselect
);




print '<div class="div-table-responsive">'; // You can use div-table-responsive-no-min if you dont need reserved height for your table
print '<table class="tagtable nobottomiftotal liste scrum-user-story-plan-wizard">'."\n";


// Loop on record
// --------------------------------------------------------------------
$i = 0;
$totalarray = array();
$colspan = 6;
foreach ($TQueryResults as $obj)
{


	/**
	 * @var ScrumUserStory $userStory
	 */
	$userStory = scrumProjectGetObjectByElement('scrumproject_scrumuserstory', $obj->id);
	$userStory->getTotalTimeFromSprints();


	$project = $userStory->getProjectLinked();


	// Show here line of result
	print '<tr class="oddeven  liste_titre --open" id="user-story-'.$userStory->id.'">';

	print '<td class="nowrap" colspan="2">';

	print '<span class="toggle-more-btn --open" title="'.dol_escape_htmltag($langs->trans('ShowDetails')).'" data-target="'. $userStory->id.'"><i class="fa fa-minus-square" ></i></span>';
	print $userStory->getNomUrl(1).' : '.$userStory->label;

	print '</td>';

	$colKey = 'us_qty_planned';
	print '<td class="col-us-qty-planned" >';
	print $userStory->getPlannedBadge();
	print '</td>';

	print '<td>';
	if($project){
		print $project->getNomUrl(1). ' - '.$project->title;
	}
	print '</td>';

	print '<td>';
	if($project){
		if(!empty($project->date_start)){
			print dol_print_date($project->date_start);
		}else{
			print '?';
		}

		print ' '.$langs->trans('to').' ';

		if(!empty($project->date_end)){
			print dol_print_date($project->date_end);
		}else{
			print '?';
		}

	}
	print '</td>';

	print '<td class="col-action">';

	print '</td>';

	print '</tr>'."\n";




	/**
	 * LES TITRES
	 */

	// Show here line of result
	print '<tr class="oddeven toggle-line-display --open liste_titre" data-parent="'. $userStory->id.'">';

	// ID
	print '<th>';
	print '#';
	print '</th>';

	// Libelle
	print '<th class="nowrap">';
	print $langs->trans('label');
	print '</th>';

	print '<th class="col-qty-planned">';
	print $langs->trans('QtyPlanned');
	print '</th>';

	print '<th class="col-scrumsprint">';
	print $langs->trans('ScrumSprint');
	print '</th>';

	print '<th class="col-scrumsprint-qty-to-plan">';
	print $langs->trans('QtySprintCanPlan');
	print '</th>';


	// Action column
	print '<th class="nowrap center">';

	print '</th>';

	print '</tr>'."\n";


	/** ******************** */
	/** *** SHOW DETAILS *** */
	/** ******************** */


	$staticScrumUserStorySprint = new ScrumUserStorySprint($db);
	$staticScrumSprint = new ScrumSprint($db);

	$sqld =  /** @Lang SQL */
		' SELECT usp.rowid id, usp.fk_scrum_sprint, sp.date_start , sp.date_end '
		.' FROM '.MAIN_DB_PREFIX.$staticScrumUserStorySprint->table_element . ' usp '
		.' JOIN '.MAIN_DB_PREFIX.$staticScrumSprint->table_element . ' sp ON (usp.fk_scrum_sprint = sp.rowid) '
		.' WHERE usp.fk_scrum_user_story = '.intval($userStory->id);

	$usPlanneds = $db->getRows($sqld);

	if($usPlanneds){
		foreach ($usPlanneds as $usPlanned){
			$errors = 0;
			$errorMsg = '';

			$scrumUserStorySprint = new ScrumUserStorySprint($db);
			$res = $scrumUserStorySprint->fetch($usPlanned->id);
			if($res <= 0){
				$errors++;
				$errorMsg.= '';
			}

			$scrumSprint = new ScrumSprint($db);
			$res = $scrumSprint->fetch($usPlanned->fk_scrum_sprint);
			if($res <= 0){
				$errors++;
				$errorMsg.= '';
			}


			if($errors){
				print '<tr class="oddeven toggle-line-display --open" data-parent="'. $userStory->id.'">';
				print '<td colspan="'.$colspan.'" class="opacitymedium">'.$langs->trans("Errors").' : '.$errorMsg.'</td>';
				print '</tr>';
				continue;
			}

			// Show here line of result
			$sprintIsOpen = in_array(intval($scrumSprint->status), array(ScrumSprint::STATUS_DRAFT, ScrumSprint::STATUS_PENDING, ScrumSprint::STATUS_VALIDATED));
			print '<tr class="oddeven toggle-line-display --open" data-sprint-closed="'.($sprintIsOpen?'0':'1').'" data-parent="'. $userStory->id.'" id="scrum-user-story-sprint-'.$scrumUserStorySprint->id.'"  >';


			print '<td class="nowrap">';
			print $scrumUserStorySprint->getNomUrl(1);
			print '</td>';

			$liveEdit = '';
			if($scrumUserStorySprint->statut == $scrumUserStorySprint::STATUS_DRAFT){
				$liveEdit = scrumProjectGenLiveUpdateAttributes($scrumUserStorySprint->element, $scrumUserStorySprint->id, 'label', 'scrumUserStorySprintPlanningWizardLiveUpdate');
			}
			print '<td '.$liveEdit.'>';
			print $scrumUserStorySprint->showOutputFieldQuick('label');
			print '</td>';



			$liveEdit = '';
			if($scrumUserStorySprint->statut == $scrumUserStorySprint::STATUS_DRAFT){
				$liveEdit = scrumProjectGenLiveUpdateAttributes($scrumUserStorySprint->element, $scrumUserStorySprint->id, 'qty_planned', 'scrumUserStorySprintPlanningWizardLiveUpdate');
			}
			print '<td '.$liveEdit.' >';
			print $scrumUserStorySprint->showOutputFieldQuick('qty_planned');
			print '</td>';

			print '<td class="col-scrumsprint">';
			print $scrumSprint->getNomUrl(1);
			print ' - <strong>'.$scrumSprint->label.'</strong>';
			print '<div style="color: #666" ><span class="fa fa-calendar-check" ></span>&nbsp;<small>'.$scrumSprint->showOutputFieldQuick('date_start');
			print ' '.$langs->trans('to');
			print ' '.$scrumSprint->showOutputFieldQuick('date_end').'</small>';
			print '</div>';
			print '</td>';




			print '<td class="col-scrumsprint-qty-to-plan" data-qty-available="'.$scrumSprint->getQtyAvailable().'" data-fk_sprint="'.$scrumSprint->id.'" >';
			print $scrumSprint->getQtyAvailableBadge();
			print '</td>';


			// Action column
			print '<td class="nowrap center">';


			if($scrumUserStorySprint->canBeDeleted()){
				print '<button '
					.'class="btn-delete-us-planned ajax-action" '
					.'title="'.dol_escape_htmltag($langs->trans('DeletePlanToUserStory')).'" '
					.'data-interface-url="'.dol_buildpath('scrumproject/interface.php',1).'" '
					.'data-fk_scrum_user_story_sprint="'.$scrumUserStorySprint->id.'" '
					.'><span class="fa fa-trash"></span></button>';
			}
			else{
				print '<button '
					.'class="ajax-action" '
					.' disabled '
					.'title="'.dol_escape_htmltag($langs->trans('DeletePlanToUserStoryDisabled')).'" '
					.'><span class="fa fa-trash-o"></span></button>';
			}

			print '</td>';

			print '</tr>'."\n";
		}



	}
	else{

		print '<tr class="oddeven toggle-line-display  --open no-record-found" data-parent="'. $userStory->id.'">';
		print '<td colspan="'.($colspan-3).'" class="opacitymedium center">'.$langs->trans("NoRecordFound").'</td>';

		// sprint
		print '<td class="col-scrumsprint"></td>';

		// sprint qty to plan';
		print '<td class="col-scrumsprint-qty-to-plan"></td>';

		print '<td class="nowrap center"></td>';

		print '</tr>';
	}


	// Show here line of result
	print '<tr class="oddeven toggle-line-display --open add-line-form" data-parent="'. $userStory->id.'" >';

	// ID
	print '<td class="nowrap">';
	print '</td>';

	// Libelle
	print '<td class="nowrap">';
	print '<input type="text" value="'.dol_escape_htmltag($userStory->label).'" name="label" placeholder="'.$langs->trans("label").'" />';
	print '</td>';


	// 'qty';
	print '<td  >';

	$qty = $userStory->qty - $userStory->totalTimeFromSprints->total_qty_planned;
	if($qty<0){
		$qty = 0;
	}

	print '<input type="number" step="'.getDolGlobalString('SP_MAX_SCRUM_TASK_STEP_QTY', 'any').'" value="'.$qty.'" name="qty_planned" placeholder="'.$langs->trans("Qty").'" />';
	print '</td>';


	// sprint
	print '<td class="col-scrumsprint">';
	print '<select class="minwidth300" name="fk_scrumsprint" data-fk-scrumuserstory="'. $userStory->id.'"  data-interface-url="'.dol_buildpath('scrumproject/interface.php',1).'" ></select>';
	print '</td>';


	// sprint qty to plan';
	print '<td class="col-scrumsprint-qty-to-plan">';

	print '</td>';



	// Action column
	print '<td class="nowrap center">';
	print '<button '
		.'class=" btn-add-us-planned ajax-action" '
		.'title="'.dol_escape_htmltag($langs->trans('AddPlanToUserStory')).'" '
		.'data-interface-url="'.dol_buildpath('scrumproject/interface.php',1).'" '
		.'data-fk_scrumuserstory="'.$userStory->id.'" '
		.'><span class="fa fa-plus"></span></button>';
	print '</td>';

	print '</tr>'."\n";


	/**
	 * Line de separation
	 */
	print '<tr class="toggle-line-display  --open" data-parent="'. $userStory->id.'">';
	print '<td colspan="'.$colspan.'" ></td>';
	print '</tr>';

	$i++;
}






print '</table>'."\n";
print '</div>'."\n";

print '</form>'."\n";

// End of page
llxFooter();
$db->close();

